@model VirtualDeckWeb.Models.CardViewModel
@using VirtualDeckGenNHibernate.EN.VirtualDeck;
@using VirtualDeckGenNHibernate.Enumerated.VirtualDeck;
@{
    IEnumerable<VirtualDeckWeb.Models.AttackMoveViewModel> ModelAttack = ViewData["Attack"] as IEnumerable<VirtualDeckWeb.Models.AttackMoveViewModel>;
}

@{
    ViewBag.Title = "Detalle Carta";
}

@if (Session["user"] != null)
{
    VirtualUserEN en = Session["user"] as VirtualUserEN;

    int id = en.Id;

    <div class="detalleTokens">
        <p class="userInfoTokens tokensTienda"><strong>Tokens: </strong><span>@en.Tokens <img src="~/Resources/token.png" /></span></p>
    </div>

}

<div class="container superior">
    <div class="row">


        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
            @Html.Partial("CardPartial", Model)
        </div>



        <div class="col-lg-8 col-md-8 col-sm-6 col-xs-12 details">
            @using (Html.BeginForm("Buy", "Card", FormMethod.Post))
            {

                <h3 style="font-weight:bold;" class="h3card">@Html.DisplayFor(model => model.Name)</h3>
                <p>@Html.DisplayFor(model => model.Description)</p>
                if (Model.Rarity == RarityEnum.Epic || Model.Rarity == RarityEnum.Legendary || Model.Rarity == RarityEnum.Mythical)
                {
                    <p class="error-message error-p" style="margin-bottom:2em; color:var(--red) !important;">*Las cartas de rareza Épica, Legendaria y Mítica solo se pueden obtener en sobres</p>
                    @Html.ActionLink("Ir a la Tienda de Sobres", "Pack", "Shop", routeValues: null, htmlAttributes: new { @class = "action-button" })
                }
                else
                {
                    <div>
                        <label>Precio</label>
                        <p class="price">@Html.DisplayFor(model => model.Price)<img src="~/Resources/token.png" alt="Tokens" class="token"></p>
                    </div>
                    VirtualUserEN user = Session["User"] as VirtualUserEN;
                    if (user != null)
                    {
                        <div>
                            <label for="cantidad">Cantidad</label>
                            <input type="number" id="cantidad" name="amount" min="1" value="1" max="50" onchange="changeTokens(this);" />
                        </div>
                        <div>
                            <label>Precio total</label>
                            <p><span class="totalPrice">@Html.DisplayFor(model => model.Price)</span><span><img src="~/Resources/token.png" alt="Tokens" class="token"></span></p>
                        </div>


                        <input type="submit" value="Comprar" class="btn btn-default action-button" />
                    }
                    else
                    {
                        @Html.ActionLink("Comprar", "Login", "Account", routeValues: null, htmlAttributes: new { id = "loginLink", @class = "action-button" })
                    }
                }
                <input type="hidden" value="@Model.Id" name="cardId">
            }

        </div>

    </div>
</div>
<div class="container">
    @Html.Partial("AttackListPartial", ModelAttack)
</div>
<div class="container">
    @{
        Html.RenderAction("ListPartial", "Comment", new { productID = Model.Id });
    }
</div>

@Html.Partial("OperationResultPartial")