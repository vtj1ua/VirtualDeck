@model VirtualDeckWeb.Models.VirtualUserViewModel
@using VirtualDeckGenNHibernate.EN.VirtualDeck;
@using VirtualDeckWeb.Assemblers;
@using VirtualDeckWeb.Models;

@{
    ViewBag.Title = "Editar";
}

<div class="container">
    <div class="row">

        @{
            VirtualUserEN user = Session["User"] as VirtualUserEN;
            if (user != null)

            {

                using (Html.BeginForm("Edit", "VirtualUser", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal formDivHor">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Id)

                        <div class="form-group widthForm">
                            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2 labelDiv" })
                            <div class="inputsEdit">
                                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @Value = user.UserName } })
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group widthForm">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2 labelDiv" })
                            <div class="formDiv inputsEdit">
                                @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @Value = user.Description } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group widthForm imgDivForm">
                            @Html.LabelFor(model => model.Img, htmlAttributes: new { @class = "control-label col-md-2 labelDiv" })
                            <div id="foto-reg">
                                <input class="notVisible" type="file" name="file" accept="image/*" onchange="previsualizarImagen(this);">
                                <img id="photo-usu" class="imgForm" height="200" width="200" src="~/Resources/@Model.Img" alt="Foto del usuario" onclick="return cargarImagen(this.parentNode);">
                                <footer class="foto-footer">
                                    <a class="action-button margin-a" onclick="return cargarImagen(this.parentNode.parentNode);">Buscar Foto</a>
                                    <a class="action-button" onclick="return borrarFoto(this.parentNode.parentNode);">Borrar Foto</a>
                                </footer>
                                <input type="hidden" id="hiddenInput" name="DeletedImg" value="0" />
                            </div>
                        </div>

                        <div class="form-group widthForm buttonsDiv">
                            <div>
                                <input class="bot-userInfo marginRightElem" type="submit" value="MODIFICAR" />

                                @Html.ActionLink("VOLVER", "Details", new { Id = user.Id }, new { @class = "action-button marginLeftElem" })
                            </div>
                                    
                                

                        </div>

                    </div>
                }

            }
            else
            {
                //MOSTRAR MENSAJE DE NO SE PUEDE ACCEDER
                <p>No se puede acceder a esta página si no estás logueado</p>
            }
        }
    </div>
</div>





@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/script.js")
}
